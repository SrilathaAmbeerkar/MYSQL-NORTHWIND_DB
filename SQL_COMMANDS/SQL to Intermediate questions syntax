20Q)  Categories, and the total products in each category For this problem, we’d like to see the total number of products in each
category. Sort the results by the total number of products, in descending order

Solution:

select
   Category_name,
   count(Product_id)
from Products
Inner Join Categories
where Products.Category_id = Categories.Category_id
Group By Category_name
Order by count(product_id) desc;

21Q) Total customer per the country. In the customers atble, show the total number of cutomers per country and city.

Solution:

select
   Country,
   city,
   count(Customer_id)
   from Customers
   group by country, city;

22Q) Products that need reordering. What products do we have in our inventory that should be reordered? For now, just use the fields UnitsInStock and ReorderLevel, where UnitsInStock is less than the ReorderLevel, ignoring the fields UnitsOnOrder and Discontinued. Order the results by ProductID.

Solution:

select
   Product_name,
   units_in_stock,
   reorder_level
from Products
where units_in_stock > reorder_level;


23Q) Products that need reordering, continued Now we need to incorporate these fields—UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued—into our calculation. We’ll define “products that need reordering” with the following: UnitsInStock plus UnitsOnOrder are less than or equal to ReorderLevel The Discontinued flag is false (0)

Solution:

Select
Product_id,
Product_name,
units_in_stock,
units_on_order,
reorder_level,
Discontinued
from Products
where units_in_stock + units_on_order <= reorder_level and discontinued = 0
order by Product_id;

24Q) Customer list by region A salesperson for Northwind is going on a business trip to visit customers, and would like to see a list of all customers, sorted by region, alphabetically. However, he wants the customers with no region (null in the Region field) to be at the end, instead of at the top, where you’d normally find the null values. Within the same region, companies should be sorted by CustomerID.

Solution:

Select
   Customer_id,
   Company_name,
   region
from customers
order by region desc;

Q25) High freight charges Some of the countries we ship to have very high freight charges. We'd like to investigate some more shipping options for our customers, to be able to offer them lower freight charges. Return the three ship countries with the highest average freight overall, in descending order by average freight


Solution:

select
   Ship_country,
   avg(freight) as average_freight
from orders
group by ship_country
order by avg(freight) desc;

Q26) High freight charges - 2015 We're continuing on the question above on high freight charges. Now, instead of using all the orders we have, we only want to see orders from the year 2015

Solution:

select
   Ship_country,
   avg(freight)
from orders
where order_date >= '2015-01-01'
and order_date < '2016-01-01'
group by ship_country
order by avg(freight) desc;


Q27) High freight charges with between Another (incorrect) answer to the problem above is this:
Select Top 3
ShipCountry
,AverageFreight = avg(freight)
From Orders
Where
OrderDate between '1/1/2015' and '12/31/2015'
Group By ShipCountry
Order By AverageFreight desc;

Notice when you run this, it gives Sweden as the ShipCountry with the third highest freight charges. However, this is wrong - it should be France. What is the OrderID of the order that the (incorrect) answer above is missing?
 

Solution:

No data available for the year 2015

Q28)  High freight charges - last year We're continuing to work on high freight charges. We now want to get the three ship countries with the highest average freight charges. But instead of filtering for a particular year, we want to use the last 12 months of order data, using as the end date the last OrderDate in Orders.

Solution:





Q29) we are doing inventory and need to show information like the below, for all orders, sort by Order_id and Product_id.


Solution:






Q30) Customers with no orders. There are some customers who have never actually placed the order. show these customers.


Solution:

select customers.customer_id,
orders.Customer_id
from customers
left join orders
on customers.Customer_id = orders.customer_id
where orders.customer_id is null;

Q31) Customers with no orders for EmployeeID 4 One employee (Margaret Peacock, EmployeeID 4) has placed the most
orders. However, there are some customers who've never placed an order with her. Show only those customers who have never placed an order with her.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
Solution:

select customers.customer_id,
orders.Customer_id
from customers
left join orders
on orders.Customer_id = customers.customer_id
and orders.employee_id = 4
where orders.customer_id is null;






